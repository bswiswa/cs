#|
Space efficiency
Computer memories used to be measured in kilobytes as opposed to gigabytes these days. As your program's memory requirements get bigger, that indirectly slows the program down. This is because the operating system moves processes in and out of memory and so the higher the memory load your program has the more it will take for the operating system to make it available for running its constituent steps.

Procedural programs without iteration are generally viewed as more space inefficient. However there is a difference in the way we write the procedures that can improve how we do recursive procedures. A recursive procedure can be written in a way that makes it iterative.

|#

; The process generated by this program is recursive
(define (count sent)
  (if (empty? sent)
      0
      (+ 1 (count (bf sent))) ))
#|
using the above form, there will be multiple recursive calls to count that will wait on the stack until the last one evaluates thus taking up space
|#

; The process generated by this program is iterative
(define (count sent)
  (define (iter wds result)
    (if (empty? wds)
	result
	(iter (bf wds) (+ 1 result)) ))
  (iter sent 0) )
#|
In this case the result grows with each successive recursive call. On the last call the final result is already there. Because all the work is done prior to the recursive call there is no need for the program to remember the previous calls.
A scheme compiler is capable of detecting if the recursive call is the last to be done, it will treat it appropriately and allow the previous calls to be garbage collected. This is called tail-call recursion


You have to think hard about what is making your program inefficient and how to achieve a better order of growth. 
An ounce of mathematics is worth a pound of computer science eg if you try to write a program to solve Pascal's triangle, you may get a Theta(2^N) problem or Theta(N^2) but if you know the mathematical formula for calculating an element, you can bring it down to linear order.


Worry about getting it right first then you can optimaze space or time afterwards.
|#


